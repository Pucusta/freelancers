{
	"name": "countriesDataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "countriesoftheworld",
						"type": "DatasetReference"
					},
					"name": "countries"
				},
				{
					"dataset": {
						"referenceName": "worldhappinessreport",
						"type": "DatasetReference"
					},
					"name": "happiness"
				},
				{
					"dataset": {
						"referenceName": "humanfreedomindex",
						"type": "DatasetReference"
					},
					"name": "hfi"
				},
				{
					"dataset": {
						"referenceName": "lifeexpectancy",
						"type": "DatasetReference"
					},
					"name": "lifeexpectancy"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "countryNameFix1"
				},
				{
					"name": "trim1"
				},
				{
					"name": "trim2"
				},
				{
					"name": "trim3"
				},
				{
					"name": "trim4"
				},
				{
					"name": "countryNameFix2"
				},
				{
					"name": "countryNameFix3"
				},
				{
					"name": "countryNameFix4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Country as string,",
				"          Region as string,",
				"          Population as string,",
				"          {Area (sq. mi.)} as string,",
				"          {Pop. Density (per sq. mi.)} as string,",
				"          {Coastline (coast/area ratio)} as string,",
				"          {Net migration} as string,",
				"          {Infant mortality (per 1000 births)} as string,",
				"          {GDP ($ per capita)} as string,",
				"          {Literacy (%)} as string,",
				"          {Phones (per 1000)} as string,",
				"          {Arable (%)} as string,",
				"          {Crops (%)} as string,",
				"          {Other (%)} as string,",
				"          Climate as string,",
				"          Birthrate as string,",
				"          Deathrate as string,",
				"          Agriculture as string,",
				"          Industry as string,",
				"          Service as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countries",
				"source(output(",
				"          Country as string,",
				"          {Happiness.Rank} as string,",
				"          {Happiness.Score} as string,",
				"          {Whisker.high} as string,",
				"          {Whisker.low} as string,",
				"          {Economy..GDP.per.Capita.} as string,",
				"          Family as string,",
				"          {Health..Life.Expectancy.} as string,",
				"          Freedom as string,",
				"          Generosity as string,",
				"          {Trust..Government.Corruption.} as string,",
				"          {Dystopia.Residual} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> happiness",
				"source(output(",
				"          year as string,",
				"          countries as string,",
				"          region as string,",
				"          hf_score as string,",
				"          hf_rank as string,",
				"          hf_quartile as string,",
				"          pf_rol_procedural as string,",
				"          pf_rol_civil as string,",
				"          pf_rol_criminal as string,",
				"          pf_rol_vdem as string,",
				"          pf_rol as string,",
				"          pf_ss_homicide as string,",
				"          pf_ss_homicide_data as string,",
				"          pf_ss_disappearances_disap as string,",
				"          pf_ss_disappearances_violent as string,",
				"          pf_ss_disappearances_violent_data as string,",
				"          pf_ss_disappearances_organized as string,",
				"          pf_ss_disappearances_fatalities as string,",
				"          pf_ss_disappearances_fatalities_data as string,",
				"          pf_ss_disappearances_injuries as string,",
				"          pf_ss_disappearances_injuries_data as string,",
				"          pf_ss_disappearances_torture as string,",
				"          pf_ss_killings as string,",
				"          pf_ss_disappearances as string,",
				"          pf_ss as string,",
				"          pf_movement_vdem_foreign as string,",
				"          pf_movement_vdem_men as string,",
				"          pf_movement_vdem_women as string,",
				"          pf_movement_vdem as string,",
				"          pf_movement_cld as string,",
				"          pf_movement as string,",
				"          pf_religion_freedom_vdem as string,",
				"          pf_religion_freedom_cld as string,",
				"          pf_religion_freedom as string,",
				"          pf_religion_suppression as string,",
				"          pf_religion as string,",
				"          pf_assembly_entry as string,",
				"          pf_assembly_freedom_house as string,",
				"          pf_assembly_freedom_bti as string,",
				"          pf_assembly_freedom_cld as string,",
				"          pf_assembly_freedom as string,",
				"          pf_assembly_parties_barriers as string,",
				"          pf_assembly_parties_bans as string,",
				"          pf_assembly_parties_auton as string,",
				"          pf_assembly_parties as string,",
				"          pf_assembly_civil as string,",
				"          pf_assembly as string,",
				"          pf_expression_direct_killed as string,",
				"          pf_expression_direct_killed_data as string,",
				"          pf_expression_direct_jailed as string,",
				"          pf_expression_direct_jailed_data as string,",
				"          pf_expression_direct as string,",
				"          pf_expression_vdem_cultural as string,",
				"          pf_expression_vdem_harass as string,",
				"          pf_expression_vdem_gov as string,",
				"          pf_expression_vdem_internet as string,",
				"          pf_expression_vdem_selfcens as string,",
				"          pf_expression_vdem as string,",
				"          pf_expression_house as string,",
				"          pf_expression_bti as string,",
				"          pf_expression_cld as string,",
				"          pf_expression as string,",
				"          pf_identity_same_m as string,",
				"          pf_identity_same_f as string,",
				"          pf_identity_same as string,",
				"          pf_identity_divorce as string,",
				"          pf_identity_inheritance_widows as string,",
				"          pf_identity_inheritance_daughters as string,",
				"          pf_identity_inheritance as string,",
				"          pf_identity_fgm as string,",
				"          pf_identity as string,",
				"          pf_score as string,",
				"          pf_rank as string,",
				"          ef_government_consumption as string,",
				"          ef_government_consumption_data as string,",
				"          ef_government_transfers as string,",
				"          ef_government_transfers_data as string,",
				"          ef_government_investment as string,",
				"          ef_government_investment_data as string,",
				"          ef_government_tax_income as string,",
				"          ef_government_tax_income_data as string,",
				"          ef_government_tax_payroll as string,",
				"          ef_government_tax_payroll_data as string,",
				"          ef_government_tax as string,",
				"          ef_government_soa as string,",
				"          ef_government as string,",
				"          ef_legal_judicial as string,",
				"          ef_legal_courts as string,",
				"          ef_legal_protection as string,",
				"          ef_legal_military as string,",
				"          ef_legal_integrity as string,",
				"          ef_legal_enforcement as string,",
				"          ef_legal_regulatory as string,",
				"          ef_legal_police as string,",
				"          ef_gender as string,",
				"          ef_legal as string,",
				"          ef_money_growth as string,",
				"          ef_money_growth_data as string,",
				"          ef_money_sd as string,",
				"          ef_money_sd_data as string,",
				"          ef_money_inflation as string,",
				"          ef_money_inflation_data as string,",
				"          ef_money_currency as string,",
				"          ef_money as string,",
				"          ef_trade_tariffs_revenue as string,",
				"          ef_trade_tariffs_revenue_data as string,",
				"          ef_trade_tariffs_mean as string,",
				"          ef_trade_tariffs_mean_data as string,",
				"          ef_trade_tariffs_sd as string,",
				"          ef_trade_tariffs_sd_data as string,",
				"          ef_trade_tariffs as string,",
				"          ef_trade_regulatory_nontariff as string,",
				"          ef_trade_regulatory_compliance as string,",
				"          ef_trade_regulatory as string,",
				"          ef_trade_black as string,",
				"          ef_trade_movement_open as string,",
				"          ef_trade_movement_capital as string,",
				"          ef_trade_movement_visit as string,",
				"          ef_trade_movement as string,",
				"          ef_trade as string,",
				"          ef_regulation_credit_ownership as string,",
				"          ef_regulation_credit_private as string,",
				"          ef_regulation_credit_interest as string,",
				"          ef_regulation_credit as string,",
				"          ef_regulation_labor_minwage as string,",
				"          ef_regulation_labor_firing as string,",
				"          ef_regulation_labor_bargain as string,",
				"          ef_regulation_labor_hours as string,",
				"          ef_regulation_labor_dismissal as string,",
				"          ef_regulation_labor_conscription as string,",
				"          ef_regulation_labor as string,",
				"          ef_regulation_business_adm as string,",
				"          ef_regulation_business_burden as string,",
				"          ef_regulation_business_start as string,",
				"          ef_regulation_business_impartial as string,",
				"          ef_regulation_business_licensing as string,",
				"          ef_regulation_business_compliance as string,",
				"          ef_regulation_business as string,",
				"          ef_regulation as string,",
				"          ef_score as string,",
				"          ef_rank as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> hfi",
				"source(output(",
				"          Country as string,",
				"          Year as string,",
				"          Status as string,",
				"          {Life expectancy } as string,",
				"          {Adult Mortality} as string,",
				"          {infant deaths} as string,",
				"          Alcohol as string,",
				"          {percentage expenditure} as string,",
				"          {Hepatitis B} as string,",
				"          {Measles } as string,",
				"          { BMI } as string,",
				"          {under-five deaths } as string,",
				"          Polio as string,",
				"          {Total expenditure} as string,",
				"          {Diphtheria } as string,",
				"          { HIV/AIDS} as string,",
				"          GDP as string,",
				"          Population as string,",
				"          { thinness  1-19 years} as string,",
				"          { thinness 5-9 years} as string,",
				"          {Income composition of resources} as string,",
				"          Schooling as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> lifeexpectancy",
				"hfi filter(year == '2017') ~> filter1",
				"lifeexpectancy filter(Year == '2015') ~> filter2",
				"trim1 derive(Country = case(\r",
				"    Country == 'Antigua & Barbuda', 'Antigua and Barbuda',\r",
				"    Country == 'Bahamas, The', 'Bahamas',\r",
				"    Country == 'Bosnia & Herzegovina', 'Bosnia and Herzegovina',\r",
				"    Country == 'Central African Rep.', 'Central African Republic',\r",
				"    Country == 'Congo, Dem. Rep.', 'Congo',\r",
				"    Country == 'Gambia, The', 'Gambia',\r",
				"    Country == 'Korea, South', 'South Korea',\r",
				"    Country == 'Saint Kitts & Nevis', 'Saint Kitts and Nevis',\r",
				"    Country == 'Sao Tome & Principe', 'Sao Tome and Principe',\r",
				"    Country == 'Trinidad & Tobago', 'Trinidad and Tobago',\r",
				"    Country\r",
				"    )) ~> countryNameFix1",
				"countries derive(Country = trim(Country)) ~> trim1",
				"happiness derive(Country = trim(Country)) ~> trim2",
				"filter1 derive(countries = trim(countries)) ~> trim3",
				"filter2 derive(Country = trim(Country)) ~> trim4",
				"trim2 derive() ~> countryNameFix2",
				"trim3 derive() ~> countryNameFix3",
				"trim4 derive() ~> countryNameFix4"
			]
		}
	}
}